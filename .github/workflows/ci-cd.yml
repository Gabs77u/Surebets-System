# 🚀 GitHub Actions CI/CD Pipeline - Sistema de Surebets
# Pipeline completo para testes, build e deploy automatizado

name: 🎯 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# =============================================================================
# JOBS DE CI/CD
# =============================================================================

jobs:
  # 🔍 ANÁLISE DE CÓDIGO E LINTING
  code-quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Cache Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 📋 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install black flake8 mypy pytest pytest-cov safety bandit
        
    - name: 🎨 Code Formatting (Black)
      run: black --check backend/ src/
      
    - name: 🔍 Linting (Flake8)
      run: flake8 backend/ src/ --max-line-length=88 --extend-ignore=E203,W503
      
    - name: 🔬 Type Checking (MyPy)
      run: mypy backend/ src/ --ignore-missing-imports
      
    - name: 🛡️ Security Check (Bandit)
      run: bandit -r backend/ src/ -f json -o bandit-report.json
      
    - name: 🔒 Dependency Security (Safety)
      run: safety check --json
      
    - name: 📊 Upload Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-quality-reports
        path: |
          bandit-report.json
          .mypy_cache/

  # 🧪 TESTES AUTOMATIZADOS
  tests:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_surebets
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 📦 Cache Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        
    - name: 📋 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest pytest-cov pytest-xdist pytest-mock
        
    - name: 🧪 Run Unit Tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_surebets
        REDIS_URL: redis://localhost:6379/0
        FLASK_ENV: testing
      run: |
        python -m pytest tests/unit/ -v --cov=backend --cov-report=xml --cov-report=html
        
    - name: 🔗 Run Integration Tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_surebets
        REDIS_URL: redis://localhost:6379/0
        FLASK_ENV: testing
      run: |
        python -m pytest tests/integration/ -v
        
    - name: 📊 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: 📈 Upload Coverage Reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/

  # 🐳 BUILD DOCKER IMAGE
  build-image:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    needs: [code-quality, tests]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🏷️ Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 🔐 Login to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🏗️ Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

  # 🔒 SECURITY SCANNING
  security-scan:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    needs: build-image
    if: github.event_name != 'pull_request'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🛡️ Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📊 Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # 🚀 DEPLOY STAGING
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-image, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: 🚀 Deploy to ECS Staging
      run: |
        # Script de deploy para staging
        echo "Deploying to staging environment..."
        # aws ecs update-service --cluster staging --service surebets --force-new-deployment

  # 🏭 DEPLOY PRODUCTION
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-image, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: 🏭 Deploy to ECS Production
      run: |
        # Script de deploy para produção
        echo "Deploying to production environment..."
        # aws ecs update-service --cluster production --service surebets --force-new-deployment
        
    - name: 🔔 Notify Deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # 📊 PERFORMANCE TESTS
  performance-tests:
    name: 📊 Performance Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📋 Install Locust
      run: pip install locust
      
    - name: 🏃 Run Performance Tests
      run: |
        locust -f tests/performance/locustfile.py --host=https://staging.surebets.com --users=100 --spawn-rate=10 --run-time=5m --headless --csv=performance-results
        
    - name: 📊 Upload Performance Results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: performance-results*

# =============================================================================
# WORKFLOW DE RELEASE
# =============================================================================

  # 🏷️ CREATE RELEASE
  create-release:
    name: 🏷️ Create Release
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: [deploy-production]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📋 Generate Changelog
      id: changelog
      run: |
        # Gerar changelog baseado em commits
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: 🏷️ Create Release Notes
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## 🚀 What's New
          
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## 📊 Metrics
          - Docker Image: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}`
          - Deployment: Production
          - Status: ✅ Deployed
          
          ## 🔗 Links
          - [Production Dashboard](https://surebets.com)
          - [Documentation](https://docs.surebets.com)
        draft: false
        prerelease: false

# =============================================================================
# CONFIGURAÇÕES GERAIS
# =============================================================================

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
