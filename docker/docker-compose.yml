# 🐳 Docker Compose - Sistema de Surebets
# Configuração para desenvolvimento e produção

version: '3.8'

services:
  # 🚀 Aplicação Principal
  surebets-app:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: surebets-app
    restart: unless-stopped
    ports:
      - "5000:5000"  # Dashboard
      - "5001:5001"  # Admin API
    environment:
      - FLASK_ENV=development
      - SECRET_KEY=dev-secret-key-change-in-production
      - DATABASE_URL=postgresql://surebets:password@db:5432/surebets
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=DEBUG
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./config:/app/config
    depends_on:
      - db
      - redis
    networks:
      - surebets-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 🗄️ Banco de Dados PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: surebets-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=surebets
      - POSTGRES_USER=surebets
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - surebets-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U surebets -d surebets"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 🔴 Cache Redis
  redis:
    image: redis:7-alpine
    container_name: surebets-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - surebets-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # 🌐 Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: surebets-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/sites-available:/etc/nginx/sites-available
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - ./static:/usr/share/nginx/html/static
    depends_on:
      - surebets-app
    networks:
      - surebets-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 📊 Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: surebets-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    networks:
      - surebets-network

  # 📈 Grafana (Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: surebets-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - surebets-network

  # 📋 Portainer (Container Management)
  portainer:
    image: portainer/portainer-ce:latest
    container_name: surebets-portainer
    restart: unless-stopped
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - surebets-network

# 🌐 Networks
networks:
  surebets-network:
    driver: bridge
    name: surebets-network

# 💾 Volumes Persistentes
volumes:
  postgres_data:
    name: surebets-postgres-data
  redis_data:
    name: surebets-redis-data
  prometheus_data:
    name: surebets-prometheus-data
  grafana_data:
    name: surebets-grafana-data
  portainer_data:
    name: surebets-portainer-data
